Let's remove the handling for new properties from the code and the test cases.

### Updated `resolve_properties` Function in `src/parser.py`:

We'll remove the `new_properties` logic:

```python
def resolve_properties(application_properties, environment_properties, xml_files):
    combined_properties = {}
    missing_properties = set()
    removed_properties = set()

    # Check for properties in application_properties not found in environment_properties
    for key, value in application_properties.items():
        if value.startswith('${'):
            ref_key = value[2:-1]  # Extract the key within ${}
            found = False
            for xml_name, xml_root in xml_files.items():
                element = xml_root.find(f".//*[name='{ref_key}']")
                if element is not None:
                    value = element.find('value').text
                    combined_properties[key] = value
                    found = True
                    break
            if not found:
                if ref_key in environment_properties:
                    combined_properties[key] = environment_properties[ref_key]
                else:
                    missing_properties.add(key)
        else:
            combined_properties[key] = value

    # Check for properties in environment_properties not used in application_properties
    for key in environment_properties:
        if key not in application_properties:
            removed_properties.add(key)

    return combined_properties, missing_properties, removed_properties
```

### Updated `output_properties` Function in `src/utils.py`:

Remove handling for `new_properties`:

```python
def output_properties(mode, properties, missing_properties=None, removed_properties=None):
    if mode == 1:
        # Print to console
        for key, value in properties.items():
            print(f"{key}: {value}")
    elif mode == 2:
        # Write to properties file
        with open('output_properties.properties', 'w') as f:
            for key, value in properties.items():
                f.write(f"{key}={value}\n")
    elif mode == 3:
        # Write missing properties to log file
        if missing_properties:
            with open('missing_properties.log', 'w') as f:
                for key in missing_properties:
                    f.write(f"{key}\n")
    elif mode == 4:
        # Write removed properties to log file
        if removed_properties:
            with open('removed_properties.log', 'w') as f:
                for key in removed_properties:
                    f.write(f"{key}\n")
```

### Updated `test_utils.py`:

Remove the test case related to `new_properties` and adjust the other tests:

```python
import os
import pytest
from src.utils import output_properties

def test_output_properties_console(capfd):
    properties = {'key1': 'value1', 'key2': 'value2'}
    output_properties(1, properties)
    captured = capfd.readouterr()
    assert "key1: value1" in captured.out
    assert "key2: value2" in captured.out

def test_output_properties_file(tmpdir):
    properties = {'key1': 'value1', 'key2': 'value2'}
    output_file = tmpdir.join("output_properties.properties")
    output_properties(2, properties)
    assert output_file.read() == "key1=value1\nkey2=value2\n"

def test_log_missing_properties(tmpdir):
    properties = {'key1': 'value1', 'key2': 'value2'}
    missing_properties = {'key3', 'key4'}
    
    output_properties(3, properties, missing_properties=missing_properties)
    
    missing_file = tmpdir.join("missing_properties.log")
    
    assert missing_file.read() == "key3\nkey4\n"

def test_log_removed_properties(tmpdir):
    properties = {'key1': 'value1', 'key2': 'value2'}
    removed_properties = {'key3', 'key4'}
    
    output_properties(4, properties, removed_properties=removed_properties)
    
    removed_file = tmpdir.join("removed_properties.log")
    
    assert removed_file.read() == "key3\nkey4\n"
```

### Example Project Structure:

Ensure your project structure is as follows:

```
project_root/
│
├── src/
│   ├── config.py
│   ├── parser.py
│   ├── utils.py
│   ├── model.py
│   └── tests/
│       ├── test_config.py
│       ├── test_parser.py
│       └── test_utils.py
├── application.properties
├── environment.properties
└── xml_files/
    ├── file1.xml
    ├── file2.xml
    └── ...
```

### Running the Tests:

Ensure you are in the project root directory and run the tests with pytest:

```sh
pytest
```

This setup removes the handling of new properties and focuses on the comparison between `application.properties` and `environment.properties`, identifying missing and removed properties, and logging them accordingly.
